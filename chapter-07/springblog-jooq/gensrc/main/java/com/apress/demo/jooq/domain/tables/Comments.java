/*
 * This file is generated by jOOQ.
 */
package com.apress.demo.jooq.domain.tables;


import com.apress.demo.jooq.domain.Keys;
import com.apress.demo.jooq.domain.Public;
import com.apress.demo.jooq.domain.tables.records.CommentsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comments extends TableImpl<CommentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.COMMENTS</code>
     */
    public static final Comments COMMENTS = new Comments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentsRecord> getRecordType() {
        return CommentsRecord.class;
    }

    /**
     * The column <code>PUBLIC.COMMENTS.ID</code>.
     */
    public final TableField<CommentsRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.COMMENTS.POST_ID</code>.
     */
    public final TableField<CommentsRecord, Integer> POST_ID = createField(DSL.name("POST_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.COMMENTS.TITLE</code>.
     */
    public final TableField<CommentsRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.COMMENTS.AUTHOR_NAME</code>.
     */
    public final TableField<CommentsRecord, String> AUTHOR_NAME = createField(DSL.name("AUTHOR_NAME"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.COMMENTS.BODY</code>.
     */
    public final TableField<CommentsRecord, String> BODY = createField(DSL.name("BODY"), SQLDataType.VARCHAR(1000000000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.COMMENTS.CREATED_ON</code>.
     */
    public final TableField<CommentsRecord, LocalDateTime> CREATED_ON = createField(DSL.name("CREATED_ON"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>PUBLIC.COMMENTS.UPDATED_ON</code>.
     */
    public final TableField<CommentsRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("UPDATED_ON"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    private Comments(Name alias, Table<CommentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comments(Name alias, Table<CommentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.COMMENTS</code> table reference
     */
    public Comments(String alias) {
        this(DSL.name(alias), COMMENTS);
    }

    /**
     * Create an aliased <code>PUBLIC.COMMENTS</code> table reference
     */
    public Comments(Name alias) {
        this(alias, COMMENTS);
    }

    /**
     * Create a <code>PUBLIC.COMMENTS</code> table reference
     */
    public Comments() {
        this(DSL.name("COMMENTS"), null);
    }

    public <O extends Record> Comments(Table<O> child, ForeignKey<O, CommentsRecord> key) {
        super(child, key, COMMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CommentsRecord, Integer> getIdentity() {
        return (Identity<CommentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CommentsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A;
    }

    @Override
    public List<ForeignKey<CommentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_AB);
    }

    private transient Posts _posts;

    /**
     * Get the implicit join path to the <code>PUBLIC.POSTS</code> table.
     */
    public Posts posts() {
        if (_posts == null)
            _posts = new Posts(this, Keys.CONSTRAINT_AB);

        return _posts;
    }

    @Override
    public Comments as(String alias) {
        return new Comments(DSL.name(alias), this);
    }

    @Override
    public Comments as(Name alias) {
        return new Comments(alias, this);
    }

    @Override
    public Comments as(Table<?> alias) {
        return new Comments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comments rename(String name) {
        return new Comments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comments rename(Name name) {
        return new Comments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comments rename(Table<?> name) {
        return new Comments(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
