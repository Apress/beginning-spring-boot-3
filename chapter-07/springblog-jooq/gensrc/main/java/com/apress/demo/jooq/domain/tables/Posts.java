/*
 * This file is generated by jOOQ.
 */
package com.apress.demo.jooq.domain.tables;


import com.apress.demo.jooq.domain.Keys;
import com.apress.demo.jooq.domain.Public;
import com.apress.demo.jooq.domain.enums.PostsPostStatus;
import com.apress.demo.jooq.domain.tables.records.PostsRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Posts extends TableImpl<PostsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.POSTS</code>
     */
    public static final Posts POSTS = new Posts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostsRecord> getRecordType() {
        return PostsRecord.class;
    }

    /**
     * The column <code>PUBLIC.POSTS.ID</code>.
     */
    public final TableField<PostsRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.POSTS.TITLE</code>.
     */
    public final TableField<PostsRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POSTS.DESCRIPTION</code>.
     */
    public final TableField<PostsRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POSTS.BODY</code>.
     */
    public final TableField<PostsRecord, String> BODY = createField(DSL.name("BODY"), SQLDataType.VARCHAR(1000000000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.POSTS.SLUG</code>.
     */
    public final TableField<PostsRecord, String> SLUG = createField(DSL.name("SLUG"), SQLDataType.VARCHAR(60).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.POSTS.POST_STATUS</code>.
     */
    public final TableField<PostsRecord, PostsPostStatus> POST_STATUS = createField(DSL.name("POST_STATUS"), SQLDataType.VARCHAR.asEnumDataType(com.apress.demo.jooq.domain.enums.PostsPostStatus.class), this, "");

    /**
     * The column <code>PUBLIC.POSTS.CREATED_ON</code>.
     */
    public final TableField<PostsRecord, LocalDateTime> CREATED_ON = createField(DSL.name("CREATED_ON"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>PUBLIC.POSTS.UPDATED_ON</code>.
     */
    public final TableField<PostsRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("UPDATED_ON"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    private Posts(Name alias, Table<PostsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Posts(Name alias, Table<PostsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.POSTS</code> table reference
     */
    public Posts(String alias) {
        this(DSL.name(alias), POSTS);
    }

    /**
     * Create an aliased <code>PUBLIC.POSTS</code> table reference
     */
    public Posts(Name alias) {
        this(alias, POSTS);
    }

    /**
     * Create a <code>PUBLIC.POSTS</code> table reference
     */
    public Posts() {
        this(DSL.name("POSTS"), null);
    }

    public <O extends Record> Posts(Table<O> child, ForeignKey<O, PostsRecord> key) {
        super(child, key, POSTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PostsRecord, Integer> getIdentity() {
        return (Identity<PostsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PostsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public Posts as(String alias) {
        return new Posts(DSL.name(alias), this);
    }

    @Override
    public Posts as(Name alias) {
        return new Posts(alias, this);
    }

    @Override
    public Posts as(Table<?> alias) {
        return new Posts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(String name) {
        return new Posts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(Name name) {
        return new Posts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(Table<?> name) {
        return new Posts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, PostsPostStatus, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super PostsPostStatus, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super PostsPostStatus, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
